errorPrune = sum(predictedLabelsPrune != testingSet$class)
misclassification_rate_pruned = errorPrune/sizeTestSet2
AllErrors[fold]=misclassification_rate
AllErrorsPruned[fold]=misclassification_rate_pruned
}
AverageError = mean(AllErrors)
AverageErrorPruned = mean(AllErrorsPruned)
library (rpart)
AllErrors = c()
AllErrorsPruned = c()
for (fold in 1:10) {
num_samples = dim(mushroomData)[1]
sampling.rate = 0.8
training = sample(1:num_samples, sampling.rate*num_samples, replace= FALSE)
trainingSet = subset(mushroomData[training, ])
testing = setdiff(1:num_samples,training)
testingSet = subset(mushroomData[testing, ])
decTreeModel = rpart(class~cap.diameter+cap.shape+cap.surface+cap.color+does.bruise.or.bleed+gill.attachment+gill.spacing+gill.color+stem.height+stem.width+stem.root+stem.surface+stem.color+has.ring+ring.type+spore.print.color+habitat+season,data=trainingSet)
plot(decTreeModel, margin=0.1)
text(decTreeModel)
plotcp(decTreeModel)
pruned_decTreeModel = prune(decTreeModel, cp=0.014)
plot (pruned_decTreeModel, margin=0.1)
text (pruned_decTreeModel)
predictedLabels = predict(decTreeModel, testingSet, type="class")
sizeTestSet = dim(testingSet) [1]
error = sum(predictedLabels != testingSet$class)
misclassification_rate = error/sizeTestSet
predictedLabelsPrune = predict(pruned_decTreeModel, testingSet, type="class")
sizeTestSet2 = dim(testingSet) [1]
errorPrune = sum(predictedLabelsPrune != testingSet$class)
misclassification_rate_pruned = errorPrune/sizeTestSet2
AllErrors[fold]=misclassification_rate
AllErrorsPruned[fold]=misclassification_rate_pruned
}
AverageError = mean(AllErrors)
AverageErrorPruned = mean(AllErrorsPruned)
library (rpart)
AllErrors = c()
AllErrorsPruned = c()
for (fold in 1:10) {
num_samples = dim(mushroomData)[1]
sampling.rate = 0.8
training = sample(1:num_samples, sampling.rate*num_samples, replace= FALSE)
trainingSet = subset(mushroomData[training, ])
testing = setdiff(1:num_samples,training)
testingSet = subset(mushroomData[testing, ])
decTreeModel = rpart(class~cap.diameter+cap.shape+cap.surface+cap.color+does.bruise.or.bleed+gill.attachment+gill.spacing+gill.color+stem.height+stem.width+stem.root+stem.surface+stem.color+has.ring+ring.type+spore.print.color+habitat+season,data=trainingSet)
plot(decTreeModel, margin=0.1)
text(decTreeModel)
plotcp(decTreeModel)
pruned_decTreeModel = prune(decTreeModel, cp=0.014)
plot (pruned_decTreeModel, margin=0.1)
text (pruned_decTreeModel)
predictedLabels = predict(decTreeModel, testingSet, type="class")
sizeTestSet = dim(testingSet) [1]
error = sum(predictedLabels != testingSet$class)
misclassification_rate = error/sizeTestSet
predictedLabelsPrune = predict(pruned_decTreeModel, testingSet, type="class")
sizeTestSet2 = dim(testingSet) [1]
errorPrune = sum(predictedLabelsPrune != testingSet$class)
misclassification_rate_pruned = errorPrune/sizeTestSet2
AllErrors[fold]=misclassification_rate
AllErrorsPruned[fold]=misclassification_rate_pruned
}
AverageError = mean(AllErrors)
AverageErrorPruned = mean(AllErrorsPruned)
library (rpart)
AllErrors = c()
AllErrorsPruned = c()
for (fold in 1:10) {
num_samples = dim(mushroomData)[1]
sampling.rate = 0.8
training = sample(1:num_samples, sampling.rate*num_samples, replace= FALSE)
trainingSet = subset(mushroomData[training, ])
testing = setdiff(1:num_samples,training)
testingSet = subset(mushroomData[testing, ])
decTreeModel = rpart(class~cap.diameter+cap.shape+cap.surface+cap.color+does.bruise.or.bleed+gill.attachment+gill.spacing+gill.color+stem.height+stem.width+stem.root+stem.surface+stem.color+has.ring+ring.type+spore.print.color+habitat+season,data=trainingSet)
plot(decTreeModel, margin=0.1)
text(decTreeModel)
plotcp(decTreeModel)
pruned_decTreeModel = prune(decTreeModel, cp=0.014)
plot (pruned_decTreeModel, margin=0.1)
text (pruned_decTreeModel)
predictedLabels = predict(decTreeModel, testingSet, type="class")
sizeTestSet = dim(testingSet) [1]
error = sum(predictedLabels != testingSet$class)
misclassification_rate = error/sizeTestSet
predictedLabelsPrune = predict(pruned_decTreeModel, testingSet, type="class")
sizeTestSet2 = dim(testingSet) [1]
errorPrune = sum(predictedLabelsPrune != testingSet$class)
misclassification_rate_pruned = errorPrune/sizeTestSet2
AllErrors[fold]=misclassification_rate
AllErrorsPruned[fold]=misclassification_rate_pruned
}
AverageError = mean(AllErrors)
AverageErrorPruned = mean(AllErrorsPruned)
library (rpart)
AllErrors = c()
AllErrorsPruned = c()
for (fold in 1:10) {
num_samples = dim(mushroomData)[1]
sampling.rate = 0.8
training = sample(1:num_samples, sampling.rate*num_samples, replace= FALSE)
trainingSet = subset(mushroomData[training, ])
testing = setdiff(1:num_samples,training)
testingSet = subset(mushroomData[testing, ])
decTreeModel = rpart(class~cap.diameter+cap.shape+cap.surface+cap.color+does.bruise.or.bleed+gill.attachment+gill.spacing+gill.color+stem.height+stem.width+stem.root+stem.surface+stem.color+has.ring+ring.type+spore.print.color+habitat+season,data=trainingSet)
plot(decTreeModel, margin=0.1)
text(decTreeModel)
plotcp(decTreeModel)
pruned_decTreeModel = prune(decTreeModel, cp=0.014)
plot (pruned_decTreeModel, margin=0.1)
text (pruned_decTreeModel)
predictedLabels = predict(decTreeModel, testingSet, type="class")
sizeTestSet = dim(testingSet) [1]
error = sum(predictedLabels != testingSet$class)
misclassification_rate = error/sizeTestSet
predictedLabelsPrune = predict(pruned_decTreeModel, testingSet, type="class")
sizeTestSet2 = dim(testingSet) [1]
errorPrune = sum(predictedLabelsPrune != testingSet$class)
misclassification_rate_pruned = errorPrune/sizeTestSet2
AllErrors[fold]=misclassification_rate
AllErrorsPruned[fold]=misclassification_rate_pruned
}
AverageError = mean(AllErrors)
AverageErrorPruned = mean(AllErrorsPruned)
library (rpart)
AllErrors = c()
AllErrorsPruned = c()
for (fold in 1:10) {
num_samples = dim(mushroomData)[1]
sampling.rate = 0.8
training = sample(1:num_samples, sampling.rate*num_samples, replace= FALSE)
trainingSet = subset(mushroomData[training, ])
testing = setdiff(1:num_samples,training)
testingSet = subset(mushroomData[testing, ])
decTreeModel = rpart(class~cap.diameter+cap.shape+cap.surface+cap.color+does.bruise.or.bleed+gill.attachment+gill.spacing+gill.color+stem.height+stem.width+stem.root+stem.surface+stem.color+has.ring+ring.type+spore.print.color+habitat+season,data=trainingSet)
plot(decTreeModel, margin=0.1)
text(decTreeModel)
plotcp(decTreeModel)
pruned_decTreeModel = prune(decTreeModel, cp=0.02)
plot (pruned_decTreeModel, margin=0.1)
text (pruned_decTreeModel)
predictedLabels = predict(decTreeModel, testingSet, type="class")
sizeTestSet = dim(testingSet) [1]
error = sum(predictedLabels != testingSet$class)
misclassification_rate = error/sizeTestSet
predictedLabelsPrune = predict(pruned_decTreeModel, testingSet, type="class")
sizeTestSet2 = dim(testingSet) [1]
errorPrune = sum(predictedLabelsPrune != testingSet$class)
misclassification_rate_pruned = errorPrune/sizeTestSet2
AllErrors[fold]=misclassification_rate
AllErrorsPruned[fold]=misclassification_rate_pruned
}
AverageError = mean(AllErrors)
AverageErrorPruned = mean(AllErrorsPruned)
library (rpart)
AllErrors = c()
AllErrorsPruned = c()
for (fold in 1:10) {
num_samples = dim(mushroomData)[1]
sampling.rate = 0.8
training = sample(1:num_samples, sampling.rate*num_samples, replace= FALSE)
trainingSet = subset(mushroomData[training, ])
testing = setdiff(1:num_samples,training)
testingSet = subset(mushroomData[testing, ])
decTreeModel = rpart(class~cap.diameter+cap.shape+cap.surface+cap.color+does.bruise.or.bleed+gill.attachment+gill.spacing+gill.color+stem.height+stem.width+stem.root+stem.surface+stem.color+has.ring+ring.type+spore.print.color+habitat+season,data=trainingSet)
plot(decTreeModel, margin=0.1)
text(decTreeModel)
plotcp(decTreeModel)
pruned_decTreeModel = prune(decTreeModel, cp=0.02)
plot (pruned_decTreeModel, margin=0.1)
text (pruned_decTreeModel)
predictedLabels = predict(decTreeModel, testingSet, type="class")
sizeTestSet = dim(testingSet) [1]
error = sum(predictedLabels != testingSet$class)
misclassification_rate = error/sizeTestSet
predictedLabelsPrune = predict(pruned_decTreeModel, testingSet, type="class")
sizeTestSet2 = dim(testingSet) [1]
errorPrune = sum(predictedLabelsPrune != testingSet$class)
misclassification_rate_pruned = errorPrune/sizeTestSet2
AllErrors[fold]=misclassification_rate
AllErrorsPruned[fold]=misclassification_rate_pruned
}
AverageError = mean(AllErrors)
AverageErrorPruned = mean(AllErrorsPruned)
library (rpart)
AllErrors = c()
AllErrorsPruned = c()
for (fold in 1:10) {
num_samples = dim(mushroomData)[1]
sampling.rate = 0.8
training = sample(1:num_samples, sampling.rate*num_samples, replace= FALSE)
trainingSet = subset(mushroomData[training, ])
testing = setdiff(1:num_samples,training)
testingSet = subset(mushroomData[testing, ])
decTreeModel = rpart(class~cap.diameter+cap.shape+cap.surface+cap.color+does.bruise.or.bleed+gill.attachment+gill.spacing+gill.color+stem.height+stem.width+stem.root+stem.surface+stem.color+has.ring+ring.type+spore.print.color+habitat+season,data=trainingSet)
plot(decTreeModel, margin=0.1)
text(decTreeModel)
plotcp(decTreeModel)
pruned_decTreeModel = prune(decTreeModel, cp=0.02)
plot (pruned_decTreeModel, margin=0.1)
text (pruned_decTreeModel)
predictedLabels = predict(decTreeModel, testingSet, type="class")
sizeTestSet = dim(testingSet) [1]
error = sum(predictedLabels != testingSet$class)
misclassification_rate = error/sizeTestSet
predictedLabelsPrune = predict(pruned_decTreeModel, testingSet, type="class")
sizeTestSet2 = dim(testingSet) [1]
errorPrune = sum(predictedLabelsPrune != testingSet$class)
misclassification_rate_pruned = errorPrune/sizeTestSet2
AllErrors[fold]=misclassification_rate
AllErrorsPruned[fold]=misclassification_rate_pruned
}
AverageError = mean(AllErrors)
AverageErrorPruned = mean(AllErrorsPruned)
library (rpart)
AllErrors = c()
AllErrorsPruned = c()
for (fold in 1:10) {
num_samples = dim(mushroomData)[1]
sampling.rate = 0.8
training = sample(1:num_samples, sampling.rate*num_samples, replace= FALSE)
trainingSet = subset(mushroomData[training, ])
testing = setdiff(1:num_samples,training)
testingSet = subset(mushroomData[testing, ])
decTreeModel = rpart(class~cap.diameter+cap.shape+cap.surface+cap.color+does.bruise.or.bleed+gill.attachment+gill.spacing+gill.color+stem.height+stem.width+stem.root+stem.surface+stem.color+has.ring+ring.type+spore.print.color+habitat+season,data=trainingSet)
plot(decTreeModel, margin=0.1)
text(decTreeModel)
plotcp(decTreeModel)
pruned_decTreeModel = prune(decTreeModel, cp=0.02)
plot (pruned_decTreeModel, margin=0.1)
text (pruned_decTreeModel)
predictedLabels = predict(decTreeModel, testingSet, type="class")
sizeTestSet = dim(testingSet) [1]
error = sum(predictedLabels != testingSet$class)
misclassification_rate = error/sizeTestSet
predictedLabelsPrune = predict(pruned_decTreeModel, testingSet, type="class")
sizeTestSet2 = dim(testingSet) [1]
errorPrune = sum(predictedLabelsPrune != testingSet$class)
misclassification_rate_pruned = errorPrune/sizeTestSet2
AllErrors[fold]=misclassification_rate
AllErrorsPruned[fold]=misclassification_rate_pruned
}
AverageError = mean(AllErrors)
AverageErrorPruned = mean(AllErrorsPruned)
library (rpart)
AllErrors = c()
AllErrorsPruned = c()
for (fold in 1:10) {
num_samples = dim(mushroomData)[1]
sampling.rate = 0.8
training = sample(1:num_samples, sampling.rate*num_samples, replace= FALSE)
trainingSet = subset(mushroomData[training, ])
testing = setdiff(1:num_samples,training)
testingSet = subset(mushroomData[testing, ])
decTreeModel = rpart(class~cap.diameter+cap.shape+cap.surface+cap.color+does.bruise.or.bleed+gill.attachment+gill.spacing+gill.color+stem.height+stem.width+stem.root+stem.surface+stem.color+has.ring+ring.type+spore.print.color+habitat+season,data=trainingSet)
plot(decTreeModel, margin=0.1)
text(decTreeModel)
plotcp(decTreeModel)
pruned_decTreeModel = prune(decTreeModel, cp=0.02)
plot (pruned_decTreeModel, margin=0.1)
text (pruned_decTreeModel)
predictedLabels = predict(decTreeModel, testingSet, type="class")
sizeTestSet = dim(testingSet) [1]
error = sum(predictedLabels != testingSet$class)
misclassification_rate = error/sizeTestSet
predictedLabelsPrune = predict(pruned_decTreeModel, testingSet, type="class")
sizeTestSet2 = dim(testingSet) [1]
errorPrune = sum(predictedLabelsPrune != testingSet$class)
misclassification_rate_pruned = errorPrune/sizeTestSet2
AllErrors[fold]=misclassification_rate
AllErrorsPruned[fold]=misclassification_rate_pruned
}
AverageError = mean(AllErrors)
AverageErrorPruned = mean(AllErrorsPruned)
library (rpart)
AllErrors = c()
AllErrorsPruned = c()
for (fold in 1:10) {
num_samples = dim(mushroomData)[1]
sampling.rate = 0.8
training = sample(1:num_samples, sampling.rate*num_samples, replace= FALSE)
trainingSet = subset(mushroomData[training, ])
testing = setdiff(1:num_samples,training)
testingSet = subset(mushroomData[testing, ])
decTreeModel = rpart(class~cap.diameter+cap.shape+cap.surface+cap.color+does.bruise.or.bleed+gill.attachment+gill.spacing+gill.color+stem.height+stem.width+stem.root+stem.surface+stem.color+has.ring+ring.type+spore.print.color+habitat+season,data=trainingSet)
plot(decTreeModel, margin=0.1)
text(decTreeModel)
plotcp(decTreeModel)
pruned_decTreeModel = prune(decTreeModel, cp=0.02)
plot (pruned_decTreeModel, margin=0.1)
text (pruned_decTreeModel)
predictedLabels = predict(decTreeModel, testingSet, type="class")
sizeTestSet = dim(testingSet) [1]
error = sum(predictedLabels != testingSet$class)
misclassification_rate = error/sizeTestSet
predictedLabelsPrune = predict(pruned_decTreeModel, testingSet, type="class")
sizeTestSet2 = dim(testingSet) [1]
errorPrune = sum(predictedLabelsPrune != testingSet$class)
misclassification_rate_pruned = errorPrune/sizeTestSet2
AllErrors[fold]=misclassification_rate
AllErrorsPruned[fold]=misclassification_rate_pruned
}
AverageError = mean(AllErrors)
AverageErrorPruned = mean(AllErrorsPruned)
library (rpart)
AllErrors = c()
AllErrorsPruned = c()
for (fold in 1:10) {
num_samples = dim(mushroomData)[1]
sampling.rate = 0.8
training = sample(1:num_samples, sampling.rate*num_samples, replace= FALSE)
trainingSet = subset(mushroomData[training, ])
testing = setdiff(1:num_samples,training)
testingSet = subset(mushroomData[testing, ])
decTreeModel = rpart(class~cap.diameter+cap.shape+cap.surface+cap.color+does.bruise.or.bleed+gill.attachment+gill.spacing+gill.color+stem.height+stem.width+stem.root+stem.surface+stem.color+has.ring+ring.type+spore.print.color+habitat+season,data=trainingSet)
plot(decTreeModel, margin=0.1)
text(decTreeModel)
plotcp(decTreeModel)
pruned_decTreeModel = prune(decTreeModel, cp=0.02)
plot (pruned_decTreeModel, margin=0.1)
text (pruned_decTreeModel)
predictedLabels = predict(decTreeModel, testingSet, type="class")
sizeTestSet = dim(testingSet) [1]
error = sum(predictedLabels != testingSet$class)
misclassification_rate = error/sizeTestSet
predictedLabelsPrune = predict(pruned_decTreeModel, testingSet, type="class")
sizeTestSet2 = dim(testingSet) [1]
errorPrune = sum(predictedLabelsPrune != testingSet$class)
misclassification_rate_pruned = errorPrune/sizeTestSet2
AllErrors[fold]=misclassification_rate
AllErrorsPruned[fold]=misclassification_rate_pruned
}
AverageError = mean(AllErrors)
AverageErrorPruned = mean(AllErrorsPruned)
mushroomData = read.csv("mushroom.csv", sep = ';')
head(mushroomData)
library (rpart)
AllErrors = c()
AllErrorsPruned = c()
for (fold in 1:10) {
num_samples = dim(mushroomData)[1]
sampling.rate = 0.8
training = sample(1:num_samples, sampling.rate*num_samples, replace= FALSE)
trainingSet = subset(mushroomData[training, ])
testing = setdiff(1:num_samples,training)
testingSet = subset(mushroomData[testing, ])
decTreeModel = rpart(class~cap.diameter+cap.shape+cap.surface+cap.color+does.bruise.or.bleed+gill.attachment+gill.spacing+gill.color+stem.height+stem.width+stem.root+stem.surface+stem.color+has.ring+ring.type+spore.print.color+habitat+season,data=trainingSet)
pruned_decTreeModel = prune(decTreeModel, cp=0.02)
predictedLabels = predict(decTreeModel, testingSet, type="class")
sizeTestSet = dim(testingSet) [1]
error = sum(predictedLabels != testingSet$class)
misclassification_rate = error/sizeTestSet
predictedLabelsPrune = predict(pruned_decTreeModel, testingSet, type="class")
sizeTestSet2 = dim(testingSet) [1]
errorPrune = sum(predictedLabelsPrune != testingSet$class)
misclassification_rate_pruned = errorPrune/sizeTestSet2
AllErrors[fold]=misclassification_rate
AllErrorsPruned[fold]=misclassification_rate_pruned
}
AverageError = mean(AllErrors)
AverageErrorPruned = mean(AllErrorsPruned)
mushroomData = read.csv("mushroom.csv", sep = ';')
head(mushroomData)
library (rpart)
AllErrors = c()
AllErrorsPruned = c()
for (fold in 1:10) {
num_samples = dim(mushroomData)[1]
sampling.rate = 0.8
training = sample(1:num_samples, sampling.rate*num_samples, replace= FALSE)
trainingSet = subset(mushroomData[training, ])
testing = setdiff(1:num_samples,training)
testingSet = subset(mushroomData[testing, ])
decTreeModel = rpart(class~cap.diameter+cap.shape+cap.surface+cap.color+does.bruise.or.bleed+gill.attachment+gill.spacing+gill.color+stem.height+stem.width+stem.root+stem.surface+stem.color+has.ring+ring.type+spore.print.color+habitat+season,data=trainingSet)
pruned_decTreeModel = prune(decTreeModel, cp=0.02)
predictedLabels = predict(decTreeModel, testingSet, type="class")
sizeTestSet = dim(testingSet) [1]
error = sum(predictedLabels != testingSet$class)
misclassification_rate = error/sizeTestSet
predictedLabelsPrune = predict(pruned_decTreeModel, testingSet, type="class")
sizeTestSet2 = dim(testingSet) [1]
errorPrune = sum(predictedLabelsPrune != testingSet$class)
misclassification_rate_pruned = errorPrune/sizeTestSet2
AllErrors[fold]=misclassification_rate
AllErrorsPruned[fold]=misclassification_rate_pruned
}
AverageError = mean(AllErrors)
AverageErrorPruned = mean(AllErrorsPruned)
mushroomDataKNN = read.csv("mushroom.csv", sep = ';')
for(i in 1:ncol(mushroomDataKNN)){
mushroomDataKNN[,i] = (mushroomDataKNN[,i] - mean(mushroomDataKNN[,i]))/(sd(mushroomDataKNN[,i]))
}
mushroomDataKNN = read.csv("mushroom.csv", sep = ';')
data$acousticness = (data$acousticness - mean(data$acousticness))/sd(data$acousticness)
mushroomDataKNN = read.csv("mushroom.csv", sep = ';')
mushroomDataKNN$cap.diameter = (mushroomDataKNN$cap.diameter - mean(mushroomDataKNN$cap.diameter))/sd(mushroomDataKNN$cap.diameter)
mushroomDataKNN$stem.height = (mushroomDataKNN$stem.height - mean(mushroomDataKNN$stem.height))/sd(mushroomDataKNN$stem.height)
mushroomDataKNN$stem.width = (mushroomDataKNN$stem.width - mean(mushroomDataKNN$stem.width))/sd(mushroomDataKNN$stem.width)
View(mushroomDataKNN)
mushroomDataKNN = read.csv("mushroom.csv", sep = ';')
mushroomDataKNN$cap.diameter = (mushroomDataKNN$cap.diameter - mean(mushroomDataKNN$cap.diameter))/sd(mushroomDataKNN$cap.diameter)
mushroomDataKNN$stem.height = (mushroomDataKNN$stem.height - mean(mushroomDataKNN$stem.height))/sd(mushroomDataKNN$stem.height)
mushroomDataKNN$stem.width = (mushroomDataKNN$stem.width - mean(mushroomDataKNN$stem.width))/sd(mushroomDataKNN$stem.width)
mis = c(20)
for (i in 1:20) {
AllErrors = c()
for (fold in 1:10) {
num_samples = dim(data)[1]
sampling.rate = 0.8
training <- sample(1:num_samples, sampling.rate * num_samples, replace=FALSE)
trainingSet <- subset(data[training, ])
testing <- setdiff(1:num_samples, training)
testingSet <- subset(data[testing, ])
trainingfeatures <- subset(trainingSet, select=c(-like))
traininglabels <- trainingSet$like
testingfeatures <- subset(testingSet, select=c(-like))
predictedLabels = knn(trainingfeatures, testingfeatures,traininglabels,k=i)
sizeTestSet = dim(testingSet)[1]
error = sum(predictedLabels != testingSet$like)
misRate=error/sizeTestSet
AllErrors[fold]=misRate
}
#Calculate average error, store in array for current k value
AverageError = mean(AllErrors)
mis[i] = AverageError
}
mushroomDataKNN = read.csv("mushroom.csv", sep = ';')
mushroomDataKNN$cap.diameter = (mushroomDataKNN$cap.diameter - mean(mushroomDataKNN$cap.diameter))/sd(mushroomDataKNN$cap.diameter)
mushroomDataKNN$stem.height = (mushroomDataKNN$stem.height - mean(mushroomDataKNN$stem.height))/sd(mushroomDataKNN$stem.height)
mushroomDataKNN$stem.width = (mushroomDataKNN$stem.width - mean(mushroomDataKNN$stem.width))/sd(mushroomDataKNN$stem.width)
mis = c(20)
for (i in 1:20) {
AllErrors = c()
for (fold in 1:10) {
num_samples = dim(mushroomDataKNN)[1]
sampling.rate = 0.8
training <- sample(1:num_samples, sampling.rate * num_samples, replace=FALSE)
trainingSet <- subset(mushroomDataKNN[training, ])
testing <- setdiff(1:num_samples, training)
testingSet <- subset(mushroomDataKNN[testing, ])
trainingfeatures <- subset(trainingSet, select=c(-like))
traininglabels <- trainingSet$like
testingfeatures <- subset(testingSet, select=c(-like))
predictedLabels = knn(trainingfeatures, testingfeatures,traininglabels,k=i)
sizeTestSet = dim(testingSet)[1]
error = sum(predictedLabels != testingSet$like)
misRate=error/sizeTestSet
AllErrors[fold]=misRate
}
#Calculate average error, store in array for current k value
AverageError = mean(AllErrors)
mis[i] = AverageError
}
library(class)
mushroomDataKNN = read.csv("mushroom.csv", sep = ';')
mushroomDataKNN$cap.diameter = (mushroomDataKNN$cap.diameter - mean(mushroomDataKNN$cap.diameter))/sd(mushroomDataKNN$cap.diameter)
mushroomDataKNN$stem.height = (mushroomDataKNN$stem.height - mean(mushroomDataKNN$stem.height))/sd(mushroomDataKNN$stem.height)
mushroomDataKNN$stem.width = (mushroomDataKNN$stem.width - mean(mushroomDataKNN$stem.width))/sd(mushroomDataKNN$stem.width)
mis = c(20)
for (i in 1:20) {
AllErrors = c()
for (fold in 1:10) {
num_samples = dim(mushroomDataKNN)[1]
sampling.rate = 0.8
training <- sample(1:num_samples, sampling.rate * num_samples, replace=FALSE)
trainingSet <- subset(mushroomDataKNN[training, ])
testing <- setdiff(1:num_samples, training)
testingSet <- subset(mushroomDataKNN[testing, ])
trainingfeatures <- subset(trainingSet, select=c(-class))
traininglabels <- trainingSet$class
testingfeatures <- subset(testingSet, select=c(-class))
predictedLabels = knn(trainingfeatures, testingfeatures,traininglabels,k=i)
sizeTestSet = dim(testingSet)[1]
error = sum(predictedLabels != testingSet$class)
misRate=error/sizeTestSet
AllErrors[fold]=misRate
}
#Calculate average error, store in array for current k value
AverageError = mean(AllErrors)
mis[i] = AverageError
}
library(class)
mushroomDataKNN = read.csv("mushroom.csv", sep = ';')
mushroomDataKNN$cap.diameter = (mushroomDataKNN$cap.diameter - mean(mushroomDataKNN$cap.diameter))/sd(mushroomDataKNN$cap.diameter)
mushroomDataKNN$stem.height = (mushroomDataKNN$stem.height - mean(mushroomDataKNN$stem.height))/sd(mushroomDataKNN$stem.height)
mushroomDataKNN$stem.width = (mushroomDataKNN$stem.width - mean(mushroomDataKNN$stem.width))/sd(mushroomDataKNN$stem.width)
mis = c(20)
for (i in 1:20) {
AllErrors = c()
for (fold in 1:10) {
num_samples = dim(mushroomDataKNN)[1]
sampling.rate = 0.8
training <- sample(1:num_samples, sampling.rate * num_samples, replace=FALSE)
trainingSet <- subset(mushroomDataKNN[training, ])
testing <- setdiff(1:num_samples, training)
testingSet <- subset(mushroomDataKNN[testing, ])
trainingfeatures <- subset(trainingSet, select=c(-class))
traininglabels <- trainingSet$class
testingfeatures <- subset(testingSet, select=c(-class))
predictedLabels = knn(trainingfeatures, testingfeatures,traininglabels,k=i)
sizeTestSet = dim(testingSet)[1]
error = sum(predictedLabels != testingSet$class)
misRate=error/sizeTestSet
AllErrors[fold]=misRate
}
#Calculate average error, store in array for current k value
AverageError = mean(AllErrors)
mis[i] = AverageError
}
